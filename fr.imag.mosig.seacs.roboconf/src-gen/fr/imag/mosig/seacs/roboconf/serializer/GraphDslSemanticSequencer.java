/*
 * generated by Xtext
 */
package fr.imag.mosig.seacs.roboconf.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import fr.imag.mosig.seacs.roboconf.graphDsl.ChildrenProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.Component;
import fr.imag.mosig.seacs.roboconf.graphDsl.ComponentOrFacet;
import fr.imag.mosig.seacs.roboconf.graphDsl.ExportsProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.ExportsVariable;
import fr.imag.mosig.seacs.roboconf.graphDsl.ExtendsProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.Facet;
import fr.imag.mosig.seacs.roboconf.graphDsl.FacetsProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.Graph;
import fr.imag.mosig.seacs.roboconf.graphDsl.GraphDslPackage;
import fr.imag.mosig.seacs.roboconf.graphDsl.ImportsProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.ImportsVariable;
import fr.imag.mosig.seacs.roboconf.graphDsl.InstallerProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.OptionalProperty;
import fr.imag.mosig.seacs.roboconf.graphDsl.Properties;
import fr.imag.mosig.seacs.roboconf.services.GraphDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GraphDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GraphDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == GraphDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case GraphDslPackage.CHILDREN_PROPERTY:
				sequence_ChildrenProperty(context, (ChildrenProperty) semanticObject); 
				return; 
			case GraphDslPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case GraphDslPackage.COMPONENT_OR_FACET:
				sequence_ComponentOrFacet(context, (ComponentOrFacet) semanticObject); 
				return; 
			case GraphDslPackage.EXPORTS_PROPERTY:
				sequence_ExportsProperty(context, (ExportsProperty) semanticObject); 
				return; 
			case GraphDslPackage.EXPORTS_VARIABLE:
				sequence_ExportsVariable(context, (ExportsVariable) semanticObject); 
				return; 
			case GraphDslPackage.EXTENDS_PROPERTY:
				sequence_ExtendsProperty(context, (ExtendsProperty) semanticObject); 
				return; 
			case GraphDslPackage.FACET:
				sequence_Facet(context, (Facet) semanticObject); 
				return; 
			case GraphDslPackage.FACETS_PROPERTY:
				sequence_FacetsProperty(context, (FacetsProperty) semanticObject); 
				return; 
			case GraphDslPackage.GRAPH:
				sequence_Graph(context, (Graph) semanticObject); 
				return; 
			case GraphDslPackage.IMPORTS_PROPERTY:
				sequence_ImportsProperty(context, (ImportsProperty) semanticObject); 
				return; 
			case GraphDslPackage.IMPORTS_VARIABLE:
				sequence_ImportsVariable(context, (ImportsVariable) semanticObject); 
				return; 
			case GraphDslPackage.INSTALLER_PROPERTY:
				sequence_InstallerProperty(context, (InstallerProperty) semanticObject); 
				return; 
			case GraphDslPackage.OPTIONAL_PROPERTY:
				sequence_OptionalProperty(context, (OptionalProperty) semanticObject); 
				return; 
			case GraphDslPackage.PROPERTIES:
				sequence_Properties(context, (Properties) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name+=ID name+=ID*)
	 */
	protected void sequence_ChildrenProperty(EObject context, ChildrenProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (component=Component | facet=Facet)
	 */
	protected void sequence_ComponentOrFacet(EObject context, ComponentOrFacet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID properties=Properties)
	 */
	protected void sequence_Component(EObject context, Component semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, GraphDslPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphDslPackage.Literals.COMPONENT__NAME));
			if(transientValues.isValueTransient(semanticObject, GraphDslPackage.Literals.COMPONENT__PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphDslPackage.Literals.COMPONENT__PROPERTIES));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getComponentAccess().getPropertiesPropertiesParserRuleCall_4_0(), semanticObject.getProperties());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (exportsVariables+=ExportsVariable exportsVariables+=ExportsVariable)
	 */
	protected void sequence_ExportsProperty(EObject context, ExportsProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name='ip' | (name=ID value=INT))
	 */
	protected void sequence_ExportsVariable(EObject context, ExportsVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (extendsNames+=ID extendsNames+=ID*)
	 */
	protected void sequence_ExtendsProperty(EObject context, ExtendsProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID properties=Properties)
	 */
	protected void sequence_Facet(EObject context, Facet semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, GraphDslPackage.Literals.FACET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphDslPackage.Literals.FACET__NAME));
			if(transientValues.isValueTransient(semanticObject, GraphDslPackage.Literals.FACET__PROPERTIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphDslPackage.Literals.FACET__PROPERTIES));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getFacetAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFacetAccess().getPropertiesPropertiesParserRuleCall_6_0(), semanticObject.getProperties());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (facetsNames+=ID facetsNames+=ID*)
	 */
	protected void sequence_FacetsProperty(EObject context, FacetsProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     components+=ComponentOrFacet*
	 */
	protected void sequence_Graph(EObject context, Graph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (importsVariables+=ImportsVariable importsVariables+=ImportsVariable)
	 */
	protected void sequence_ImportsProperty(EObject context, ImportsProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (isExternal?='external'? componentName=ID componentProperty=ID isOptional?='(optional)'?)
	 */
	protected void sequence_ImportsVariable(EObject context, ImportsVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_InstallerProperty(EObject context, InstallerProperty semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, GraphDslPackage.Literals.INSTALLER_PROPERTY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GraphDslPackage.Literals.INSTALLER_PROPERTY__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getInstallerPropertyAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         childrenProperty=ChildrenProperty | 
	 *         exportsProperty=ExportsProperty | 
	 *         importsProperty=ImportsProperty | 
	 *         facetsProperty=FacetsProperty | 
	 *         extendsProperty=ExtendsProperty
	 *     )
	 */
	protected void sequence_OptionalProperty(EObject context, OptionalProperty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (installerProperty=InstallerProperty optionalProperties+=OptionalProperty*)
	 */
	protected void sequence_Properties(EObject context, Properties semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
